---
import Logo from "@ui/Logo.astro";
import HeaderNavLinks from "./HeaderNavLinks.astro";
import HeaderActions from "./HeaderActions.astro";

import MenuIcon from "@assets/icons/menu.svg";
import CloseIcon from "@assets/icons/close.svg";

const navLinks = [
  {
    href: "#about",
    label: "About",
  },
  {
    href: "#publications",
    label: "Publications",
  },
  {
    href: "#cybertactik",
    label: "CyberTactik",
  },
];
---

<div id="header-observer-helper"></div>

<header
  id="site-header"
  class="group sticky top-0 left-0 z-50 flex w-full transition-colors duration-300 data-[sticky=true]:bg-neutral-900/80"
>
  <div class="container">
    <div class="flex h-[var(--header-height)] items-center justify-between">
      <div class="z-10">
        <Logo />
      </div>

      <div class="fluid-gap hidden lg:flex lg:items-center">
        <nav>
          <HeaderNavLinks links={navLinks} />
        </nav>

        <div class="gap-x-4 lg:flex">
          <HeaderActions />
        </div>
      </div>

      <button
        id="trigger"
        aria-expanded="false"
        aria-controls="menu"
        class="peer relative z-10 inline-flex size-12 items-center justify-center lg:hidden"
      >
        <CloseIcon
          class="absolute scale-0 transition-transform group-data-[menu=open]:scale-100"
        />
        <MenuIcon
          class="absolute transition-transform group-data-[menu=open]:scale-0"
        />
      </button>
    </div>
  </div>

  <div
    id="menu"
    class="invisible fixed inset-0 flex h-screen flex-col opacity-0 transition-[opacity,visibility,background-color] duration-300 group-data-[menu='open']:visible group-data-[menu='open']:bg-neutral-900 group-data-[menu='open']:opacity-100 lg:hidden"
  >
    <div
      class="mt-[var(--header-height)] overflow-auto px-[var(--container-px)] pb-8"
    >
      <nav>
        <HeaderNavLinks links={navLinks} />
      </nav>

      <div class="mx-auto mt-6 flex max-w-sm flex-col gap-4">
        <HeaderActions />
      </div>
    </div>
  </div>
</header>

<script>
  import { scrollTo } from "@/helpers/scroll";

  const header = document.querySelector("#site-header") as HTMLElement;
  const menu = document.querySelector("#menu") as HTMLElement;

  // Menu
  const trigger = document.querySelector("#trigger") as HTMLButtonElement;
  const matchMedia = window.matchMedia("(min-width: 1024px)"); // lg breakpoint

  function closeMenu() {
    document.documentElement.classList.remove("lock");
    trigger.ariaExpanded = "false";
    header.removeAttribute("data-menu");
  }

  function toggleMenu() {
    const isOpen = trigger.ariaExpanded === "true";

    if (isOpen) {
      header.removeAttribute("data-menu");
    } else {
      header.setAttribute("data-menu", "open");
    }

    trigger.ariaExpanded = isOpen ? "false" : "true";
    document.documentElement.classList.toggle("lock", !isOpen);
  }

  matchMedia.addEventListener("change", closeMenu);
  trigger.addEventListener("click", toggleMenu);

  const sections = document.querySelectorAll(".section[id]");

  const sectionObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const sectionId = entry.target.id;

        const links = document.querySelectorAll(
          `[data-section="#${sectionId}"]`,
        );

        links.forEach((link) => {
          link?.classList.toggle("active", entry.isIntersecting);
        });
      });
    },
    { threshold: 0.5 },
  );

  sections.forEach((section) => {
    sectionObserver.observe(section);
  });

  // Sticky header
  const HEADER_STICKY_ROOT_MARGIN = 120;

  const headerObserverHelper = document.querySelector(
    "#header-observer-helper",
  ) as HTMLElement;

  const headerObserver = new IntersectionObserver(
    (entries) => {
      const [entry] = entries;
      if (entry.isIntersecting) {
        header.removeAttribute("data-sticky");
      } else {
        header.setAttribute("data-sticky", "true");
      }
    },
    {
      rootMargin: `${HEADER_STICKY_ROOT_MARGIN}px`,
    },
  );

  headerObserver.observe(headerObserverHelper);

  header.addEventListener("click", (e) => {
    const target = (e.target as HTMLElement).closest<HTMLElement>(
      "[data-scroll]",
    );

    if (!target) return;

    const selector = target.dataset.scroll;

    if (!selector) return;

    e.preventDefault();
    scrollTo(selector);
    closeMenu();
  });
</script>

<style>
  .fluid-gap {
    /* matches lg breakpoint */
    @media (min-width: 64rem) {
      gap: clamp(1rem, calc(0.3047 * (100vw - 64rem) + 1rem), 5.875rem);
    }
  }
</style>
